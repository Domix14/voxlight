#version 330 core
out vec4 outColor;

uniform vec3 minBox;
uniform vec3 maxBox;
uniform vec3 chunkSize;
uniform sampler3D chunkTexture;
uniform sampler3D worldTexture;
uniform sampler2D paletteTexture;
uniform vec3 sunPos;
uniform vec3 materials[2];

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform mat4 rotationMatrix;

const vec4 skyColor = vec4(0.529f, 0.8f,  0.92f, 1.f);

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

uint isOccupied(ivec3 pos) {
    vec3 pos0 = pos >> 1;
    ivec3 bitPos = pos & 1;
    vec3 uv = pos0/256.f;
    uint value = uint(texture(worldTexture, uv).r*255);
    return value & (1U << (bitPos.x + bitPos.z*2 + bitPos.y*4));
}

float raycastAABB(vec3 ro, vec3 rd, vec3 volMax, vec3 volMin) {
    float t1 = (volMin.x - ro.x) / rd.x;
    float t2 = (volMax.x - ro.x) / rd.x;
    float t3 = (volMin.y - ro.y) / rd.y;
    float t4 = (volMax.y - ro.y) / rd.y;
    float t5 = (volMin.z - ro.z) / rd.z;
    float t6 = (volMax.z - ro.z) / rd.z;

    float tmin = max(max(min(t1, t2), min(t3, t4)), min(t5, t6));
    float tmax = min(min(max(t1, t2), max(t3, t4)), max(t5, t6));

    // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us
    if (tmax < 0) {
        return -1;
    }

    // if tmin > tmax, ray doesn't intersect AABB
    if (tmin > tmax) {
        return -1;
    }

    if (tmin < 0f) {
        return tmax;
    }
    return tmin;
}

float getVoxel(vec3 p) {
    vec3 uv = (p+0.5)/chunkSize;
    return texture(chunkTexture, uv).r;
}

bool raycastToTarget(vec3 ro, vec3 target) {
    vec3 rd = normalize(target - ro);
    vec3 pos = floor(ro);
    vec3 step = sign(rd);
    vec3 tDelta = step / rd;
    
    float tMaxX, tMaxY, tMaxZ;
    
    vec3 fr = fract(ro);
    
    tMaxX = tDelta.x * ((rd.x>0.0) ? (1.0 - fr.x) : fr.x);
    tMaxY = tDelta.y * ((rd.y>0.0) ? (1.0 - fr.y) : fr.y);
    tMaxZ = tDelta.z * ((rd.z>0.0) ? (1.0 - fr.z) : fr.z);

    const int maxTrace = 100;

    for (int i = 0; i < maxTrace; i++) {
        if (isOccupied(ivec3(pos)) != 0U) {
            return true;
        }

        if (tMaxX < tMaxY) {
            if (tMaxZ < tMaxX) {
                tMaxZ += tDelta.z;
                pos.z += step.z;
                if(pos.z >= 256 || pos.z < 0) {
                    return false;
                }
            } else {
                tMaxX += tDelta.x;
            	pos.x += step.x;
                if(pos.x >= 256|| pos.x < 0) {
                    return false;
                }
            }
        } else {
            if (tMaxZ < tMaxY) {
                tMaxZ += tDelta.z;
                pos.z += step.z;
                if(pos.z >= 256 || pos.z < 0) {
                    return false;
                }
            } else {
            	tMaxY += tDelta.y;
            	pos.y += step.y;
                if(pos.y >= 256 || pos.y < 0) {
                    return false;
                }
            }
        }
    }

 	return false;
}

vec4 intersect(vec3 ro, vec3 rd) {
    vec3 pos = floor(ro);
    
    vec3 step = sign(rd);
    vec3 tDelta = step / rd;
    
    float tMaxX, tMaxY, tMaxZ;
    
    vec3 fr = fract(ro);
    
    tMaxX = tDelta.x * ((rd.x>0.0) ? (1.0 - fr.x) : fr.x);
    tMaxY = tDelta.y * ((rd.y>0.0) ? (1.0 - fr.y) : fr.y);
    tMaxZ = tDelta.z * ((rd.z>0.0) ? (1.0 - fr.z) : fr.z);

    vec3 norm;
    int maxTrace = 200;
    
    vec3 randomOffset = vec3(rand(gl_FragCoord.xy), rand(gl_FragCoord.xy*2), rand(gl_FragCoord.xy*6))*2-1;
    randomOffset *= 20;
    for (int i = 0; i < maxTrace; i++) {
        float hit = getVoxel(pos)*255;
        if (hit >= 1) {
            vec2 uv = vec2((hit-0.5)/256.f, 0.5f);
            vec4 color = texture(paletteTexture, uv);
            

            vec3 offset = vec3(0, 0, 0);
            if(norm.x != 0) {
                offset = rd * (tMaxX - tDelta.x - 0.1);
            } else if(norm.y != 0) {
                offset = rd * (tMaxY - tDelta.y - 0.1);
            } else if(norm.z != 0) {
                offset = rd * (tMaxZ - tDelta.z - 0.1);
            }
            vec3 worldPos = ro + offset+minBox;
            bool lighting = raycastToTarget(worldPos, sunPos+randomOffset);
            float lightIntensity = lighting ?  0.5f : 1.0f;
            
            
            
            return color * lightIntensity;
        }

        if (tMaxX < tMaxY) {
            if (tMaxZ < tMaxX) {
                tMaxZ += tDelta.z;
                pos.z += step.z;
                if(pos.z >= chunkSize.z || pos.z < 0) {
                    discard;
                    return skyColor;
                }
                norm = vec3(0, 0,-step.z);
            } else {
                tMaxX += tDelta.x;
            	pos.x += step.x;
                if(pos.x >= chunkSize.x || pos.x < 0) {
                    discard;
                    return skyColor;
                }
                norm = vec3(-step.x, 0, 0);
            }
        } else {
            if (tMaxZ < tMaxY) {
                tMaxZ += tDelta.z;
                pos.z += step.z;
                if(pos.z >= chunkSize.z || pos.z < 0) {
                    discard;
                    return skyColor;
                }
                norm = vec3(0, 0, -step.z);
            } else {
            	tMaxY += tDelta.y;
            	pos.y += step.y;
                if(pos.y >= chunkSize.y || pos.y < 0) {
                    discard;
                    return skyColor;
                }
                norm = vec3(0, -step.y, 0);
            }
        }
    }

    discard;
 	return skyColor;
}

void main(){
    vec2 coord = vec2(gl_FragCoord.x/1280, gl_FragCoord.y/720) * 2 - 1;

    vec4 start = rotationMatrix*inverse(projection*view*model)*vec4(coord, -1.f, 1.f);
    start /= start.w;
    vec4 end = rotationMatrix*inverse(projection*view*model)*vec4(coord, 1.f, 1.f);
    end /= end.w;
    vec3 ro = start.xyz;
    vec3 rd = normalize(end.xyz - start.xyz);

    if(ro.x >= minBox.x && ro.y > minBox.y && ro.z >= minBox.z &&
     ro.x <= maxBox.x && ro.y <= maxBox.y && ro.z <= maxBox.z) {
        ro -= minBox;
        outColor = intersect(ro, rd);
    } else {
        float result = raycastAABB(ro, rd, minBox, maxBox);
        if(result != -1) {
            ro -= minBox;
            outColor = intersect(ro + rd*(result-0.5), rd);
        }
    }
}

/*
uniform vec3 invS;

vec4 tree_lookup(
uniform float N,
vec3 M) // Lookup coordinates    
{
    vec4 I = vec4(0.0, 0.0, 0.0, 0.0);
    vec3 MND = M;
    for (float i=0; i<HRDWTREE_MAX_DEPTH; i++) { // fixed # of iterations
        vec3 P;      // compute lookup coords. within current node
        P = (MND + floor(0.5 + I.xyz * 255.0)) * invS;      // access indirection pool
        if (I.w < 0.9)                   // already in a leaf?
            I = texture(worldMap,P);// no, continue to next depth
            #ifdef DYN_BRANCHING // early exit if hardware supports dynamic branching
            if (I.w > 0.9)    // a leaf has been reached          
                break;
            #endif
            if (I.w < 0.1) // empty cell
                discard;      // compute pos within next depth grid
            MND = MND * N;
    }
    return (I);
}
*/